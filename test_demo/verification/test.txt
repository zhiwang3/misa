	.text
	.attribute	4, 16
	.attribute	5, "rv32i2p1_m2p0"
	.file	"conv3s1_verify.c"
	.globl	conv3s1
	.p2align	1
	.type	conv3s1,@function
conv3s1:
	addi	sp, sp, -16                     # encoding: [0x13,0x01,0x01,0xff]
	sw	a1, 12(sp)                      # encoding: [0x23,0x26,0xb1,0x00]
	sw	a2, 8(sp)                       # encoding: [0x23,0x24,0xc1,0x00]
	sw	a3, 4(sp)                       # encoding: [0x23,0x22,0xd1,0x00]
	sw	a5, 0(sp)                       # encoding: [0x23,0x20,0xf1,0x00]
	lui	t1, 40960                       # encoding: [0x37,0x03,0x00,0x0a]
	sw	zero, 4(t1)                     # encoding: [0x23,0x22,0x03,0x00]
	mco.movem0mr0	 m0r1                   # encoding: [0xfb,0x60,0x00,0x00]
	lw	a2, 28(a0)                      # encoding: [0x03,0x26,0xc5,0x01]
	sw	a2, 8(t1)                       # encoding: [0x23,0x24,0xc3,0x00]
	mco.movem0mr0	 m0r2                   # encoding: [0x7b,0x61,0x00,0x00]
	lw	a2, 28(a0)                      # encoding: [0x03,0x26,0xc5,0x01]
	sw	a2, 12(t1)                      # encoding: [0x23,0x26,0xc3,0x00]
	mco.movem0mr0	 m0r3                   # encoding: [0xfb,0x61,0x00,0x00]
	lw	a2, 28(a0)                      # encoding: [0x03,0x26,0xc5,0x01]
	sw	a2, 16(t1)                      # encoding: [0x23,0x28,0xc3,0x00]
	mco.movem0mr0	 m0r4                   # encoding: [0x7b,0x62,0x00,0x00]
	lw	a2, 32(a0)                      # encoding: [0x03,0x26,0x05,0x02]
	sw	a2, 20(t1)                      # encoding: [0x23,0x2a,0xc3,0x00]
	mco.movem0mr0	 m0r5                   # encoding: [0xfb,0x62,0x00,0x00]
	lw	a2, 20(a0)                      # encoding: [0x03,0x26,0x45,0x01]
	sw	a2, 0(t1)                       # encoding: [0x23,0x20,0xc3,0x00]
	mco.movem0mr0	 m0ro0                  # encoding: [0x7b,0x60,0x00,0x02]
	lw	a2, 24(a0)                      # encoding: [0x03,0x26,0x85,0x01]
	sw	a2, 0(t1)                       # encoding: [0x23,0x20,0xc3,0x00]
	mco.movem0mr0	 m0rp0                  # encoding: [0x7b,0x64,0x00,0x02]
	lw	a2, 128(t1)                     # encoding: [0x03,0x26,0x03,0x08]
	addi	a3, sp, 12                      # encoding: [0x93,0x06,0xc1,0x00]
	mco.loadm0	 a3, a2, m0ro0          # encoding: [0x7b,0xc0,0xc6,0x02]
	lw	a2, 160(t1)                     # encoding: [0x03,0x26,0x03,0x0a]
	addi	a3, sp, 8                       # encoding: [0x93,0x06,0x81,0x00]
	mco.loadm0	 a3, a2, m0rp0          # encoding: [0x7b,0xc4,0xc6,0x02]
	lw	a2, 12(t1)                      # encoding: [0x03,0x26,0xc3,0x00]
	addi	a6, sp, 4                       # encoding: [0x13,0x08,0x41,0x00]
	mco.loadm0	 a6, a2, m0r3           # encoding: [0xfb,0x41,0xc8,0x00]
	lw	a2, 28(a0)                      # encoding: [0x03,0x26,0xc5,0x01]
	lw	a3, 16(t1)                      # encoding: [0x83,0x26,0x03,0x01]
	slli	a2, a2, 2                       # encoding: [0x13,0x16,0x26,0x00]
	add	a2, a2, a6                      # encoding: [0x33,0x06,0x06,0x01]
	mco.loadm0	 a2, a3, m0r4           # encoding: [0x7b,0x42,0xd6,0x00]
	lw	a2, 4(a0)                       # encoding: [0x03,0x26,0x45,0x00]
	beqz	a2, .LBB0_12                    # encoding: [0x63'A',A,0x06'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_12, kind: fixup_riscv_branch
	li	a3, 0                           # encoding: [0x93,0x06,0x00,0x00]
	addi	a4, a0, 52                      # encoding: [0x13,0x07,0x45,0x03]
	li	t0, 0                           # encoding: [0x93,0x02,0x00,0x00]
	mv	a7, sp                          # encoding: [0x93,0x08,0x01,0x00]
	j	.LBB0_3                         # encoding: [0x6f,0bAAAA0000,A,A]
                                        #   fixup A - offset: 0, value: .LBB0_3, kind: fixup_riscv_jal
.LBB0_2:
	lw	a1, 8(a0)                       # encoding: [0x83,0x25,0x85,0x00]
	add	a3, a3, a1                      # encoding: [0xb3,0x86,0xb6,0x00]
	bgeu	a3, a2, .LBB0_12                # encoding: [0x63'A',0xf0'A',0xc6'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_12, kind: fixup_riscv_branch
.LBB0_3:
	beqz	a3, .LBB0_6                     # encoding: [0x63'A',0x80'A',0x06'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_6, kind: fixup_riscv_branch
	addi	a2, a2, -1                      # encoding: [0x13,0x06,0xf6,0xff]
	beq	a3, a2, .LBB0_7                 # encoding: [0x63'A',0x80'A',0xc6'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_7, kind: fixup_riscv_branch
.LBB0_5:
	bgtz	a3, .LBB0_8                     # encoding: [0x63'A',0x40'A',0xd0'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_8, kind: fixup_riscv_branch
	j	.LBB0_10                        # encoding: [0x6f,0bAAAA0000,A,A]
                                        #   fixup A - offset: 0, value: .LBB0_10, kind: fixup_riscv_jal
.LBB0_6:
	lw	a2, 0(a4)                       # encoding: [0x03,0x26,0x07,0x00]
	lw	a5, 1(a4)                       # encoding: [0x83,0x27,0x17,0x00]
	mco.arg	 0, a2, a5                      # encoding: [0x7b,0x00,0xf6,0x80]
	lw	a2, 2(a4)                       # encoding: [0x03,0x26,0x27,0x00]
	lw	a5, 3(a4)                       # encoding: [0x83,0x27,0x37,0x00]
	mco.arg	 1, a2, a5                      # encoding: [0xfb,0x00,0xf6,0x80]
	lw	a2, 4(a4)                       # encoding: [0x03,0x26,0x47,0x00]
	lw	a5, 5(a4)                       # encoding: [0x83,0x27,0x57,0x00]
	mco.arg	 2, a2, a5                      # encoding: [0x7b,0x01,0xf6,0x80]
	lw	a2, 6(a4)                       # encoding: [0x03,0x26,0x67,0x00]
	lw	a5, 7(a4)                       # encoding: [0x83,0x27,0x77,0x00]
	mco.arg	 3, a2, a5                      # encoding: [0xfb,0x01,0xf6,0x80]
	lw	a2, 8(a4)                       # encoding: [0x03,0x26,0x87,0x00]
	lw	a5, 9(a4)                       # encoding: [0x83,0x27,0x97,0x00]
	mco.arg	 4, a2, a5                      # encoding: [0x7b,0x02,0xf6,0x80]
	lw	a2, 10(a4)                      # encoding: [0x03,0x26,0xa7,0x00]
	lw	a5, 11(a4)                      # encoding: [0x83,0x27,0xb7,0x00]
	mco.arg	 5, a2, a5                      # encoding: [0xfb,0x02,0xf6,0x80]
	lw	a2, 12(a4)                      # encoding: [0x03,0x26,0xc7,0x00]
	lw	a5, 13(a4)                      # encoding: [0x83,0x27,0xd7,0x00]
	mco.arg	 6, a2, a5                      # encoding: [0x7b,0x03,0xf6,0x80]
	lw	a2, 14(a4)                      # encoding: [0x03,0x26,0xe7,0x00]
	lw	a5, 15(a4)                      # encoding: [0x83,0x27,0xf7,0x00]
	mco.arg	 7, a2, a5                      # encoding: [0xfb,0x03,0xf6,0x80]
	mco.regm0	 0, m0ro0, m0rp0        # encoding: [0x7b,0x10,0x80,0x8c]
	mco.regm0	 1, m0r1, m0r3          # encoding: [0xfb,0x90,0x30,0x80]
	mco.regm0	 2, m0r4, m0r0          # encoding: [0x7b,0x11,0x02,0x80]
	lw	a2, 20(t1)                      # encoding: [0x03,0x26,0x43,0x01]
	mco.corem0	 t0, a2, m0r5           # encoding: [0xfb,0x82,0xc2,0x00]
	lw	a2, 4(a0)                       # encoding: [0x03,0x26,0x45,0x00]
	addi	a2, a2, -1                      # encoding: [0x13,0x06,0xf6,0xff]
	bne	a3, a2, .LBB0_5                 # encoding: [0x63'A',0x90'A',0xc6'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_5, kind: fixup_riscv_branch
.LBB0_7:
	lw	a2, 0(a4)                       # encoding: [0x03,0x26,0x07,0x00]
	lw	a5, 1(a4)                       # encoding: [0x83,0x27,0x17,0x00]
	mco.arg	 0, a2, a5                      # encoding: [0x7b,0x00,0xf6,0x80]
	lw	a2, 2(a4)                       # encoding: [0x03,0x26,0x27,0x00]
	lw	a5, 3(a4)                       # encoding: [0x83,0x27,0x37,0x00]
	mco.arg	 1, a2, a5                      # encoding: [0xfb,0x00,0xf6,0x80]
	lw	a2, 4(a4)                       # encoding: [0x03,0x26,0x47,0x00]
	lw	a5, 5(a4)                       # encoding: [0x83,0x27,0x57,0x00]
	mco.arg	 2, a2, a5                      # encoding: [0x7b,0x01,0xf6,0x80]
	lw	a2, 6(a4)                       # encoding: [0x03,0x26,0x67,0x00]
	lw	a5, 7(a4)                       # encoding: [0x83,0x27,0x77,0x00]
	mco.arg	 3, a2, a5                      # encoding: [0xfb,0x01,0xf6,0x80]
	lw	a2, 8(a4)                       # encoding: [0x03,0x26,0x87,0x00]
	lw	a5, 9(a4)                       # encoding: [0x83,0x27,0x97,0x00]
	mco.arg	 4, a2, a5                      # encoding: [0x7b,0x02,0xf6,0x80]
	lw	a2, 10(a4)                      # encoding: [0x03,0x26,0xa7,0x00]
	lw	a5, 11(a4)                      # encoding: [0x83,0x27,0xb7,0x00]
	mco.arg	 5, a2, a5                      # encoding: [0xfb,0x02,0xf6,0x80]
	lw	a2, 12(a4)                      # encoding: [0x03,0x26,0xc7,0x00]
	lw	a5, 13(a4)                      # encoding: [0x83,0x27,0xd7,0x00]
	mco.arg	 6, a2, a5                      # encoding: [0x7b,0x03,0xf6,0x80]
	lw	a2, 14(a4)                      # encoding: [0x03,0x26,0xe7,0x00]
	lw	a5, 15(a4)                      # encoding: [0x83,0x27,0xf7,0x00]
	mco.arg	 7, a2, a5                      # encoding: [0xfb,0x03,0xf6,0x80]
	mco.regm0	 0, m0ro0, m0rp0        # encoding: [0x7b,0x10,0x80,0x8c]
	mco.regm0	 1, m0r2, m0r3          # encoding: [0xfb,0x10,0x31,0x80]
	mco.regm0	 2, m0r1, m0r0          # encoding: [0x7b,0x91,0x00,0x80]
	lw	a2, 20(t1)                      # encoding: [0x03,0x26,0x43,0x01]
	mco.corem0	 t0, a2, m0r5           # encoding: [0xfb,0x82,0xc2,0x00]
	blez	a3, .LBB0_10                    # encoding: [0x63'A',0x50'A',0xd0'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_10, kind: fixup_riscv_branch
.LBB0_8:
	lw	a2, 4(a0)                       # encoding: [0x03,0x26,0x45,0x00]
	addi	a2, a2, -1                      # encoding: [0x13,0x06,0xf6,0xff]
	bgeu	a3, a2, .LBB0_10                # encoding: [0x63'A',0xf0'A',0xc6'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_10, kind: fixup_riscv_branch
	lw	a2, 0(a4)                       # encoding: [0x03,0x26,0x07,0x00]
	lw	a5, 1(a4)                       # encoding: [0x83,0x27,0x17,0x00]
	mco.arg	 0, a2, a5                      # encoding: [0x7b,0x00,0xf6,0x80]
	lw	a2, 2(a4)                       # encoding: [0x03,0x26,0x27,0x00]
	lw	a5, 3(a4)                       # encoding: [0x83,0x27,0x37,0x00]
	mco.arg	 1, a2, a5                      # encoding: [0xfb,0x00,0xf6,0x80]
	lw	a2, 4(a4)                       # encoding: [0x03,0x26,0x47,0x00]
	lw	a5, 5(a4)                       # encoding: [0x83,0x27,0x57,0x00]
	mco.arg	 2, a2, a5                      # encoding: [0x7b,0x01,0xf6,0x80]
	lw	a2, 6(a4)                       # encoding: [0x03,0x26,0x67,0x00]
	lw	a5, 7(a4)                       # encoding: [0x83,0x27,0x77,0x00]
	mco.arg	 3, a2, a5                      # encoding: [0xfb,0x01,0xf6,0x80]
	lw	a2, 8(a4)                       # encoding: [0x03,0x26,0x87,0x00]
	lw	a5, 9(a4)                       # encoding: [0x83,0x27,0x97,0x00]
	mco.arg	 4, a2, a5                      # encoding: [0x7b,0x02,0xf6,0x80]
	lw	a2, 10(a4)                      # encoding: [0x03,0x26,0xa7,0x00]
	lw	a5, 11(a4)                      # encoding: [0x83,0x27,0xb7,0x00]
	mco.arg	 5, a2, a5                      # encoding: [0xfb,0x02,0xf6,0x80]
	lw	a2, 12(a4)                      # encoding: [0x03,0x26,0xc7,0x00]
	lw	a5, 13(a4)                      # encoding: [0x83,0x27,0xd7,0x00]
	mco.arg	 6, a2, a5                      # encoding: [0x7b,0x03,0xf6,0x80]
	lw	a2, 14(a4)                      # encoding: [0x03,0x26,0xe7,0x00]
	lw	a5, 15(a4)                      # encoding: [0x83,0x27,0xf7,0x00]
	mco.arg	 7, a2, a5                      # encoding: [0xfb,0x03,0xf6,0x80]
	mco.regm0	 0, m0ro0, m0rp0        # encoding: [0x7b,0x10,0x80,0x8c]
	mco.regm0	 1, m0r2, m0r3          # encoding: [0xfb,0x10,0x31,0x80]
	mco.regm0	 2, m0r4, m0r0          # encoding: [0x7b,0x11,0x02,0x80]
	lw	a2, 20(t1)                      # encoding: [0x03,0x26,0x43,0x01]
	mco.corem0	 t0, a2, m0r5           # encoding: [0xfb,0x82,0xc2,0x00]
.LBB0_10:
	lw	a2, 32(a0)                      # encoding: [0x03,0x26,0x05,0x02]
	lw	a5, 20(t1)                      # encoding: [0x83,0x27,0x43,0x01]
	mul	a2, a2, a3                      # encoding: [0x33,0x06,0xd6,0x02]
	slli	a2, a2, 2                       # encoding: [0x13,0x16,0x26,0x00]
	add	a2, a2, a7                      # encoding: [0x33,0x06,0x16,0x01]
	mco.storem0	 a2, a5, m0r5           # encoding: [0xfb,0x52,0xf6,0x00]
	mco.movem0	 m0r2, m0r3             # encoding: [0x7b,0xe1,0x01,0x00]
	mco.movem0	 m0r3, m0r4             # encoding: [0xfb,0x61,0x02,0x00]
	lw	a2, 4(a0)                       # encoding: [0x03,0x26,0x45,0x00]
	addi	a5, a2, -1                      # encoding: [0x93,0x07,0xf6,0xff]
	bgeu	a3, a5, .LBB0_2                 # encoding: [0x63'A',0xf0'A',0xf6'A',A]
                                        #   fixup A - offset: 0, value: .LBB0_2, kind: fixup_riscv_branch
	lw	a2, 28(a0)                      # encoding: [0x03,0x26,0xc5,0x01]
	addi	a5, a3, 2                       # encoding: [0x93,0x87,0x26,0x00]
	lw	a1, 16(t1)                      # encoding: [0x83,0x25,0x03,0x01]
	mul	a2, a2, a5                      # encoding: [0x33,0x06,0xf6,0x02]
	slli	a2, a2, 2                       # encoding: [0x13,0x16,0x26,0x00]
	add	a2, a2, a6                      # encoding: [0x33,0x06,0x06,0x01]
	mco.loadm0	 a2, a1, m0r4           # encoding: [0x7b,0x42,0xb6,0x00]
	lw	a2, 4(a0)                       # encoding: [0x03,0x26,0x45,0x00]
	j	.LBB0_2                         # encoding: [0x6f,0bAAAA0000,A,A]
                                        #   fixup A - offset: 0, value: .LBB0_2, kind: fixup_riscv_jal
.LBB0_12:
	li	a0, 0                           # encoding: [0x13,0x05,0x00,0x00]
	mco.releasem0	m0r1                    # encoding: [0xfb,0x50,0x00,0x80]
	mco.releasem0	m0r2                    # encoding: [0x7b,0x51,0x00,0x80]
	mco.releasem0	m0r3                    # encoding: [0xfb,0x51,0x00,0x80]
	mco.releasem0	m0r4                    # encoding: [0x7b,0x52,0x00,0x80]
	mco.releasem0	m0r5                    # encoding: [0xfb,0x52,0x00,0x80]
	addi	sp, sp, 16                      # encoding: [0x13,0x01,0x01,0x01]
	ret                                     # encoding: [0x67,0x80,0x00,0x00]
.Lfunc_end0:
	.size	conv3s1, .Lfunc_end0-conv3s1
	.ident	"clang version 17.0.0 (http://202.117.56.250/cag-tool-chains/hpu_llvm.git 2401c5db80abffaffb3fd57ec89fdf12d7de2705)"
	.section	".note.GNU-stack","",@progbits
